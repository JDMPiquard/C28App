row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- as.factor('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite <- subset(data, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
weekDay
data.lite$Day <- as.character(data.lite$Day)
weekDay <- as.character('Mon')
data.lite <- subset(data, Day == weekDay)
data.lite
test
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
data.lite
#Working code
#Calculates a simple delivery route
#by JD Nov 2014
#Inspirations
#https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/
#
#consider adding a restriction to central london destinations, by using a distance measured from postcode WC2N 5DN (trafalgar square)
#load required libraries
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- as.character('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#loop through postcodes and exlude everything outside of Radius
#NOTE: consider using apply family of functions to avoid loops
(Radius > 0)*for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(Center,test[i,2],mode="driving")
}
test <- subset(store, miles<Radius)
store <- test[1,]
#loop through postcodes
#NOTE: consider using apply family of functions to avoid loops
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(test[i,1],test[i,2],mode="driving")
}
#order by shortest time
store <- store[ order(-store[,7], decreasing = TRUE),]
#save solutions
#write.csv(store,file = "~/Desktop/distancesFridayDeliveries.csv.csv")
## Onto nested loop to find a potential route
#keep closest in separate data frame, then delete it from store
rank <- store[1,] #rank stores the final solution, ranked by order of the route
row.names(rank) <- NULL  #restarts the numbering of the data frame
store <- store[-1,] #removes the first line of the data frame
#create temp data frame
temp <- rank
t <-2 #create variable for while loop
finish <- dim(store)[1]
while(dim(rank)[1]<=finish){
for(i in 1:dim(store)[1]){
temp[i,] <- mapdist(rank[(t-1),2],store[i,2],mode="driving")
}
temp <- temp[ order(-temp[,7], decreasing = TRUE),]
rank[t,] <- temp[1,]
row.names(rank) <- NULL
temp <- temp[-1,]
row.names(temp) <- NULL
store <- temp
t <- t+1
}
write.csv(rank,file = "~/Desktop/MondayCentral14to16DeliveryRoute1.csv")
#Working code
#Calculates a simple delivery route from specific (pre-cleaned) dataset
#by JD Nov 2014
#Inspirations
#https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/
#
#consider adding a restriction to central london destinations, by using a distance measured from postcode WC2N 5DN (trafalgar square)
#load required libraries
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 12 #time slot beginning time
Time2 <- 14 #time slot finish time
weekDay <- as.character('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#loop through postcodes and exlude everything outside of Radius
#NOTE: consider using apply family of functions to avoid loops
(Radius > 0)*for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(Center,test[i,2],mode="driving")
}
test <- subset(store, miles<Radius)
store <- test[1,]
#loop through postcodes
#NOTE: consider using apply family of functions to avoid loops
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(test[i,1],test[i,2],mode="driving")
}
#order by shortest time
store <- store[ order(-store[,7], decreasing = TRUE),]
#save solutions
#write.csv(store,file = "~/Desktop/distancesFridayDeliveries.csv.csv")
## Onto nested loop to find a potential route
#keep closest in separate data frame, then delete it from store
rank <- store[1,] #rank stores the final solution, ranked by order of the route
row.names(rank) <- NULL  #restarts the numbering of the data frame
store <- store[-1,] #removes the first line of the data frame
#create temp data frame
temp <- rank
t <-2 #create variable for while loop
finish <- dim(store)[1]
while(dim(rank)[1]<=finish){
for(i in 1:dim(store)[1]){
temp[i,] <- mapdist(rank[(t-1),2],store[i,2],mode="driving")
}
temp <- temp[ order(-temp[,7], decreasing = TRUE),]
rank[t,] <- temp[1,]
row.names(rank) <- NULL
temp <- temp[-1,]
row.names(temp) <- NULL
store <- temp
t <- t+1
}
write.csv(rank,file = "~/Desktop/MondayCentral12to14DeliveryRoute1.csv")
#Working code
#Calculates a simple delivery route from specific (pre-cleaned) dataset
#by JD Nov 2014
#Inspirations
#https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/
#
#consider adding a restriction to central london destinations, by using a distance measured from postcode WC2N 5DN (trafalgar square)
#load required libraries
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 12 #time slot beginning time
Time2 <- 14 #time slot finish time
weekDay <- as.character('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
Start <- 'E16 2PX' #sets postcode of starting location, in this case the airport
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#loop through postcodes and exlude everything outside of Radius
#NOTE: consider using apply family of functions to avoid loops
(Radius > 0)*{
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(Center,test[i,2],mode="driving")
}
test <- subset(store, miles<Radius)
test[,1] <- Start
store <- test[1,]
}
#loop through postcodes
#NOTE: consider using apply family of functions to avoid loops
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(test[i,1],test[i,2],mode="driving")
}
#order by shortest time
store <- store[ order(-store[,7], decreasing = TRUE),]
#save solutions
#write.csv(store,file = "~/Desktop/distancesFridayDeliveries.csv.csv")
## Onto nested loop to find a potential route
#keep closest in separate data frame, then delete it from store
rank <- store[1,] #rank stores the final solution, ranked by order of the route
row.names(rank) <- NULL  #restarts the numbering of the data frame
store <- store[-1,] #removes the first line of the data frame
#create temp data frame
temp <- rank
t <-2 #create variable for while loop
finish <- dim(store)[1]
while(dim(rank)[1]<=finish){
for(i in 1:dim(store)[1]){
temp[i,] <- mapdist(rank[(t-1),2],store[i,2],mode="driving")
}
temp <- temp[ order(-temp[,7], decreasing = TRUE),]
rank[t,] <- temp[1,]
row.names(rank) <- NULL
temp <- temp[-1,]
row.names(temp) <- NULL
store <- temp
t <- t+1
}
write.csv(rank,file = "~/Desktop/MondayCentral12to14DeliveryRoute1.csv")
#Working code
#Calculates a simple delivery route from specific (pre-cleaned) dataset
#by JD Nov 2014
#Inspirations
#https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/
#
#consider adding a restriction to central london destinations, by using a distance measured from postcode WC2N 5DN (trafalgar square)
#load required libraries
library('ggplot2')
library('ggmap')
#set variables
#file <- 'FridayDeliveries.csv' #not in use
Time1 <- 14 #time slot beginning time
Time2 <- 16 #time slot finish time
weekDay <- as.character('Mon') #choose from Mon Tue Wed Thu Fri Sat Sun
Center <- 'WC2N 5DN' #sets centre point for radius, restricting the deliveries to a certain area
Radius <- 7 #sets the radius from centre point (set to 0 to not use this option)
Start <- 'E16 2PX' #sets postcode of starting location, in this case the airport
#initializing other variables
store <- NULL
#reading data table
data <- read.csv('~/Desktop/DeliveryOnlyDataset.csv');
#extracting the values we're interested in from the table (insert code below)
#data.lite <- data[1:dim(data)[1],] #use this for all data
data.lite <- subset(data, DBT.Slot>=Time1 & DBT.Slot<Time2) # use this for focusing on a specific time slot
data.lite$Day <- as.character(data.lite$Day)
data.lite <- subset(data.lite, Day == weekDay)
row.names(data.lite) <- NULL
#convert postcodes into character strings
data.lite$Collect.postcode <- as.character(data.lite$Collect.postcode)
data.lite$Deliver.postcode <- as.character(data.lite$Deliver.postcode)
#store into a separate data frame for simplicity
test <- data.lite[,c('Collect.postcode','Deliver.postcode')]
#lazy initialization of data frame
store <- mapdist(Center,test[1,2],mode="driving")
#loop through postcodes and exlude everything outside of Radius
#NOTE: consider using apply family of functions to avoid loops
(Radius > 0)*{
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(Center,test[i,2],mode="driving")
}
test <- subset(store, miles<Radius)
test[,1] <- Start
store <- test[1,]
}
#loop through postcodes
#NOTE: consider using apply family of functions to avoid loops
for(i in 1:dim(test)[1]){
#access google maps to obtain distances between origin and delivery point
store[i,] <- mapdist(test[i,1],test[i,2],mode="driving")
}
#order by shortest time
store <- store[ order(-store[,7], decreasing = TRUE),]
#save solutions
#write.csv(store,file = "~/Desktop/distancesFridayDeliveries.csv.csv")
## Onto nested loop to find a potential route
#keep closest in separate data frame, then delete it from store
rank <- store[1,] #rank stores the final solution, ranked by order of the route
row.names(rank) <- NULL  #restarts the numbering of the data frame
store <- store[-1,] #removes the first line of the data frame
#create temp data frame
temp <- rank
t <-2 #create variable for while loop
finish <- dim(store)[1]
while(dim(rank)[1]<=finish){
for(i in 1:dim(store)[1]){
temp[i,] <- mapdist(rank[(t-1),2],store[i,2],mode="driving")
}
temp <- temp[ order(-temp[,7], decreasing = TRUE),]
rank[t,] <- temp[1,]
row.names(rank) <- NULL
temp <- temp[-1,]
row.names(temp) <- NULL
store <- temp
t <- t+1
}
write.csv(rank,file = "~/Desktop/MondayCentral14to16DeliveryRoute1.csv")
library('maps')
map('london')
map("state")
map("uk")
?map
library(ggmap)
geocode("Imperial College London")
c(-0.1748772,51.4988)
library(dplyr)
library(reshape)
##Read data
#C28  <- read.csv("C:/Users/JD/SkyDrive/Data/Eurostat/ProvaC28/SBS main indicators aggregate/sbs_na_sca_r2_1_Data.csv")
C28 <- read.csv("~/Desktop/OneDrive/Data/Eurostat/ProvaC28/SBS main indicators aggregate/sbs_na_sca_r2_1_Data.csv")
#wages and salaries
selector <- 'Wages and Salaries'
subset <- C28[C28$INDIC_SB==selector,]
wages_df <- cast(subset, value = 'Value', GEO ~ TIME)
#wages and salaries
selector <- 'Value added at factor cost'
subset <- C28[C28$INDIC_SB==selector,]
value_df <- cast(subset, value = 'Value', GEO ~ TIME)
#not working
ULC <- wages_df[,c(2,3,4,5,6)]/value_df[,c(2,3,4,5,6)]
#this works
x <- c(2,3,4,5,6)
wages_df[wages_df==':'] <- NA
value_df[value_df==':'] <- NA
wages <- apply(wages_df[,x], 1:2, as.character)
value <- apply(value_df[,x], 1:2, as.character)
wages <- gsub(",","",wages)
value <- gsub(",","",value)
wages <- apply(wages, 1:2, as.numeric)
value <- apply(value, 1:2, as.numeric)
ULC <- round(wages/value,digits = 3)
ULC_df <- cbind(wages_df[,1],as.data.frame(ULC))
colnames(ULC_df) <- c("GEO","2008","2009","2010","2011","2012")
View(value_df)
View(ULC_df)
View(value_df)
View(wages_df)
library(shiny)
setwd("~/Desktop/OneDrive/Data/Eurostat/C28App")
runApp()
runApp()
#wages and salaries
selector <- 'Wages and Salaries'
subset <- all[all$INDIC_SB==selector,]
wages_df <- cast(subset, value = 'Value', GEO ~ TIME)
#wages and salaries
selector <- 'Value added at factor cost'
subset <- all[all$INDIC_SB==selector,]
value_df <- cast(subset, value = 'Value', GEO ~ TIME)
#actually calculate ULC
ULC <- round(wages/value,digits = 3)
ULC_df <- cbind(wages_df[,1],as.data.frame(ULC))
colnames(ULC_df) <- c("GEO","2008","2009","2010","2011","2012")
#OR
all <- C28
all[all==":"] <- NA
all <- apply(all[,5], 1:2, as.character)
all <- gsub(",","",all)
all <- apply(all, 1:2, as.numeric)
#wages and salaries
selector <- 'Wages and Salaries'
subset <- all[all$INDIC_SB==selector,]
wages_df <- cast(subset, value = 'Value', GEO ~ TIME)
#wages and salaries
selector <- 'Value added at factor cost'
subset <- all[all$INDIC_SB==selector,]
value_df <- cast(subset, value = 'Value', GEO ~ TIME)
#actually calculate ULC
ULC <- round(wages/value,digits = 3)
ULC_df <- cbind(wages_df[,1],as.data.frame(ULC))
colnames(ULC_df) <- c("GEO","2008","2009","2010","2011","2012")
?apply
all <- C28
all[all==":"] <- NA
all <- apply(all[,5], 2, as.character)
all <- gsub(",","",all)
all <- apply(all, 2, as.numeric)
all <- C28
all[all==":"] <- NA
library(dplyr)
library(reshape)
C28 <- read.csv("~/Desktop/OneDrive/Data/Eurostat/ProvaC28/SBS main indicators aggregate/sbs_na_sca_r2_1_Data.csv")
#num and salaries
selector1 <- 'Wages and Salaries'
subset <- C28[C28$INDIC_SB==selector1,]
num_df <- cast(subset, value = 'Value', GEO ~ TIME)
#num and salaries
selector2 <- 'Value added at factor cost'
subset <- C28[C28$INDIC_SB==selector2,]
den_df <- cast(subset, value = 'Value', GEO ~ TIME)
#this works
#data cleaning
x <- c(2,3,4,5,6)
num_df[num_df==':'] <- NA
den_df[den_df==':'] <- NA
num <- apply(num_df[,x], 1:2, as.character)
den <- apply(den_df[,x], 1:2, as.character)
num <- gsub(",","",num)
den <- gsub(",","",den)
num <- apply(num, 1:2, as.numeric)
den <- apply(den, 1:2, as.numeric)
#actually calculate ULC
ULC <- round(num/den,digits = 3)
ULC_df <- cbind(num_df[,1],as.data.frame(ULC))
colnames(ULC_df) <- c("GEO","2008","2009","2010","2011","2012")
View(ULC_df)
library(dplyr)
library(reshape)
C28 <- read.csv("~/Desktop/OneDrive/Data/Eurostat/ProvaC28/SBS main indicators aggregate/sbs_na_sca_r2_1_Data.csv")
#num and salaries
selector1 <- 'Wages and Salaries'
subset <- C28[C28$INDIC_SB==selector1,]
num_df <- cast(subset, value = 'Value', GEO ~ TIME)
#num and salaries
selector2 <- 'Value added at factor cost'
subset <- C28[C28$INDIC_SB==selector2,]
den_df <- cast(subset, value = 'Value', GEO ~ TIME)
#this works
#data cleaning
x <- c(2,3,4,5,6)
num_df[num_df==':'] <- NA
den_df[den_df==':'] <- NA
num <- apply(num_df[,x], 1:2, as.character)
den <- apply(den_df[,x], 1:2, as.character)
num <- gsub(",","",num)
den <- gsub(",","",den)
num <- apply(num, 1:2, as.numeric)
den <- apply(den, 1:2, as.numeric)
#actually calculate ratio
Ratio <- round(num/den,digits = 3)
Ratio_df <- cbind(num_df[,1],as.data.frame(Ratio))
colnames(Ratio_df) <- c("GEO","2008","2009","2010","2011","2012")
View(Ratio_df)
library(dplyr)
library(reshape)
C28 <- read.csv("~/Desktop/OneDrive/Data/Eurostat/ProvaC28/SBS main indicators aggregate/sbs_na_sca_r2_1_Data.csv")
#num and salaries
selector1 <- 'Personnel costs'
subset <- C28[C28$INDIC_SB==selector1,]
num_df <- cast(subset, value = 'Value', GEO ~ TIME)
#num and salaries
selector2 <- 'Value added at factor cost'
subset <- C28[C28$INDIC_SB==selector2,]
den_df <- cast(subset, value = 'Value', GEO ~ TIME)
#this works
#data cleaning
x <- c(2,3,4,5,6)
num_df[num_df==':'] <- NA
den_df[den_df==':'] <- NA
num <- apply(num_df[,x], 1:2, as.character)
den <- apply(den_df[,x], 1:2, as.character)
num <- gsub(",","",num)
den <- gsub(",","",den)
num <- apply(num, 1:2, as.numeric)
den <- apply(den, 1:2, as.numeric)
#actually calculate ratio
Ratio <- round(num/den,digits = 3)
Ratio_df <- cbind(num_df[,1],as.data.frame(Ratio))
colnames(Ratio_df) <- c("GEO","2008","2009","2010","2011","2012")
View(Ratio_df)
runApp()
runApp()
library(shinyapps)
deployApp()
